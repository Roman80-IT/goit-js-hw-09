{"mappings":"gfA6CA,IAAAA,EAAAC,EAAA,SAGMC,EAAQC,SAASC,cAAc,SAC/BC,EAAc,CAClBC,MAAOH,SAASC,cAAc,uBAC9BG,KAAMJ,SAASC,cAAc,sBAC7BI,OAAQL,SAASC,cAAc,yBAyBV,SAAdK,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAI,uBAAwCK,OAAfP,EAAS,QAAYO,OAANX,EAAM,OAEhDO,EAAE,sBAAqCI,OAAfP,EAAS,QAAYO,OAANX,EAAM,M,GAEhDA,E,IA9B4BJ,EAA7BgB,iBAAiB,UAAU,SAAAC,GAC/BA,EAAMC,iBAGmD,IAApD,IAAIC,EAAI,EAAGA,EAAIhB,EAAYG,OAAOc,MAAOD,GAAK,EAAG,CAMrCZ,EAADY,EAAI,EAHhBE,OAAOlB,EAAYC,MAAMgB,OAASD,EAAIE,OAAOlB,EAAYE,KAAKe,QAI7DE,MAAK,SAAAF,GACJtB,EAAAyB,OAAOC,QAAQJ,E,IAEhBK,OAAM,SAAAC,GACL5B,EAAAyB,OAAOI,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["//! Генератор промісів\n\n//* HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n//* Напиши скрипт, який на момент сабміту форми викликає ф-цію createPromise(position, delay) стільки разів,\n//*  скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку,\n//* враховуючи першу затримку(delay) і крок(step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     //* Fulfill\n//   } else {\n//     //* Reject\n//   }\n// }\n\n//* Доповни код ф-ції createPromise так, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n//*  Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//*  Використовуй початковий код ф-ції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//! Бібліотека повідомлень\n//?    npm i notiflix\n// УВАГА    Наступний функціонал не обов'язковий, але буде хорошою додатковою практикою.\n\n//* Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     //* Fulfill\n//   } else {\n//     //* Reject\n//   }\n// }\n\n//! ------------------------------   ВАРІАНТ 1   ----------------------------------\n//* Імпортуємо бібліотеку для сповіщень\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//* Знаходимо посилання на форму та поля вводу\nconst $form = document.querySelector('.form');\nconst $formInputs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\n//* Додаємо обробник події для подання форми\n$form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  //* Отримуємо значення з поля \"amount\" і створюємо проміси в залежності від к-сті\n  for (let i = 0; i < $formInputs.amount.value; i += 1) {\n    //* Обраховуємо затримку для проміса\n    const promiseDelay =\n      Number($formInputs.delay.value) + i * Number($formInputs.step.value);\n\n    //* Створюємо проміс\n    createPromise(i + 1, promiseDelay)\n      .then(value => {\n        Notify.success(value); //* Виводимо сповіщення про успішне виконання проміса\n      })\n      .catch(err => {\n        Notify.failure(err); //* Виводимо сповіщення про невдале виконання проміса\n      });\n  }\n});\n\n//* Ф-ція для створення проміса\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$$form","document","querySelector","$ce04d3a99e08e73b$var$$formInputs","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","res","rej","setTimeout","Math","random","concat","addEventListener","event","preventDefault","i","value","Number","then","Notify","success","catch","err","failure"],"version":3,"file":"03-promises.13d65881.js.map"}