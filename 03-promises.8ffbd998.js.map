{"mappings":"gfA6NA,IAAAA,EAAAC,EAAA,SAEMC,EAAQC,SAASC,cAAc,SAC/BC,EAAc,CAClBC,MAAOH,SAASC,cAAc,uBAC9BG,KAAMJ,SAASC,cAAc,sBAC7BI,OAAQL,SAASC,cAAc,yBAE3BK,EAAaN,SAASO,eAAe,aACrCC,EAAYR,SAASO,eAAe,YAgD1C,SAASE,EAAcC,EAAUP,GAC/B,OAAO,IAAIQ,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAI,uBAAwCK,OAAfP,EAAS,QAAYO,OAANd,EAAM,OAEhDU,EAAE,sBAAqCI,OAAfP,EAAS,QAAYO,OAANd,EAAM,M,GAEhDA,E,IAvDPJ,EAAMmB,iBAAiB,UAAU,SAAAC,GAC/BA,EAAMC,iBAEN,IAAMjB,EAAQkB,OAAOnB,EAAYC,MAAMmB,OACjClB,EAAOiB,OAAOnB,EAAYE,KAAKkB,OAC/BjB,EAASgB,OAAOnB,EAAYG,OAAOiB,OAEzC,GAAIlB,EAAO,GAAKD,EAAQ,GAAKE,GAAU,EACrCR,EAAA0B,OAAOC,QAAQ,gDADjB,CAMAlB,EAAWmB,UAAW,EACtBjB,EAAUiB,UAAW,EAIrB,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAItB,EAAQsB,GAAK,EAAG,CAClC,IAAMC,EAAezB,EAAQwB,EAAIvB,EACjCsB,EAASG,KAAKpB,EAAckB,EAAI,EAAGC,G,CAGrCjB,QAAQmB,IAAIJ,GACTK,MAAK,SAAAC,G,IACCC,GAAW,EAAXC,GAAW,EAAXC,OAAWC,E,IAAhB,QAAKC,EAAAC,EAAeN,EAAMO,OAAAC,cAArBP,GAAAI,EAAAC,EAAWG,QAAAC,MAAXT,GAAW,GAAX,IAAMX,EAANe,EAAWf,MACdzB,EAAA0B,OAAOoB,QAAQrB,E,WADZY,GAAW,EAAXC,EAAWS,C,aAAXX,GAAW,MAAXK,EAAWO,QAAXP,EAAWO,Q,YAAXX,E,MAAAC,C,MAINW,OAAM,SAAAF,GACL/C,EAAA0B,OAAOC,QAAQoB,E,IAEhBG,SAAQ,WAEPzC,EAAWmB,UAAW,EACtBjB,EAAUiB,UAAW,C,QAK3BjB,EAAUU,iBAAiB,SAAS,WAClChB,EAAYC,MAAMmB,MAAQ,OAC1BpB,EAAYE,KAAKkB,MAAQ,MACzBpB,EAAYG,OAAOiB,MAAQ,G","sources":["src/js/03-promises.js"],"sourcesContent":["//! ------------------------------   ВАРІАНТ 2   ----------------------------------\n//* Усунено зауваження ментора по 'Варіанту1':\n//*    - якщо step <0 або delay <0 або  amount <=0 показуємо нотифікашку і не рендеримо проміси\n//*    - інпут має бути дізейбл поки генератор промісів працює, щоб користувач не міг неконтрольовано замінити значення,\n//*      можемо для зручності користувача винести додатково кнопку reset, яка обнулює всі дані і зробить інпут\n//*      знову доступним для обрання промісів\n\n//! Бібліотека повідомлень\n//?    npm i notiflix\n\n//* Імпортуємо бібліотеку для сповіщень\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// //* Вибираємо елементи - форму та поля вводу\n// const $form = document.querySelector('.form');\n// const $formInputs = {\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n// };\n// const $resetBtn = document.getElementById('resetBtn');\n\n// //* Забороняємо користувачу вводити значення поки генератор працює\n// $formInputs.delay.disabled = true;\n\n// //* Обробник події для подання форми:\n// $form.addEventListener('submit', event => {\n//   event.preventDefault();\n\n//   const delay = Number($formInputs.delay.value);\n//   const step = Number($formInputs.step.value);\n//   const amount = Number($formInputs.amount.value);\n\n//   if (step < 0 || delay < 0 || amount <= 0) {\n//     Notify.failure(\n//       'Incorrect values ​​of entered parameters! Некоректні значення введених параметрів!'\n//     );\n//     return;\n//   }\n\n//   //* Деактивуємо поле вводу під час роботи генератора\n//  $formInputs.delay.disabled = true;\n\n//   //* створюємо проміси в залежності від к-сті\n//   for (let i = 0; i < amount; i += 1) {\n//     //* Рахуємо затримку проміса\n//     const promiseDelay = delay + i * step;\n\n//     //* Створюємо проміс\n//     createPromise(i + 1, promiseDelay)\n//       .then(value => {\n//         Notify.success(value);\n//       })\n//       .catch(err => {\n//         Notify.failure(err);\n//       });\n//   }\n\n//   //* Після завершення таймера, активуємо поле вводу та видаляємо значення в ньому\n//   setTimeout(() => {\n//     $formInputs.delay.disabled = false;\n//     $formInputs.delay.value = '';\n//   }, delay + (amount - 1) * step + 100); //* Запасний час на виконання останнього проміса\n// });\n\n// $resetBtn.addEventListener('click', event => {\n//   event.preventDefault();\n\n//   //* Скидаємо значення полів вводу на стандартні\n//   $formInputs.delay.disabled = false;\n//   $formInputs.delay.value = 1000;\n//   $formInputs.step.value = 100;\n//   $formInputs.amount.value = 5;\n// });\n\n// //* Ф-ція для створення проміса\n// function createPromise(position, delay) {\n//   return new Promise((res, rej) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         rej(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n// }\n\n//! ------------------------------   ВАРІАНТ 3   ----------------------------------\n//* Замість інпут, тут кнопка дізейбл:\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $form = document.querySelector('.form');\n// const $formInputs = {\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n// };\n// const $startBtn = document.querySelector('button[type=\"submit\"]');\n// const $resetBtn = document.getElementById('resetBtn');\n// let isPromiseRunning = false;\n\n// //* Деактивуємо кнопку \"Start\" при завантаженні сторінки\n// $startBtn.disabled = true;\n\n// //* Обробник події для подання форми:\n// $form.addEventListener('submit', event => {\n//   event.preventDefault();\n\n//   const delay = Number($formInputs.delay.value);\n//   const step = Number($formInputs.step.value);\n//   const amount = Number($formInputs.amount.value);\n\n//   if (step < 0 || delay < 0 || amount <= 0) {\n//     Notify.failure(\n//       'Incorrect values ​​of entered parameters! Некоректні значення введених параметрів!'\n//     );\n//     return;\n//   }\n\n//   //* Запобігаємо старту нових промісів, якщо генератор уже працює\n//   if (isPromiseRunning) {\n//     Notify.failure('Генератор вже запущений!');\n//     return;\n//   }\n\n//   isPromiseRunning = true;\n//   $startBtn.disabled = true; //* Деактивуємо кнопку \"Start\" під час роботи генератора\n\n//   for (let i = 0; i < amount; i += 1) {\n//     const promiseDelay = delay + i * step;\n\n//     createPromise(i + 1, promiseDelay)\n//       .then(value => {\n//         Notify.success(value);\n//       })\n//       .catch(err => {\n//         Notify.failure(err);\n//       });\n//   }\n\n//   //* Після завершення промісів, активуємо кнопку \"Start\" та встановлюємо змінну isPromiseRunning в false\n//   setTimeout(() => {\n//     isPromiseRunning = false;\n//     $startBtn.disabled = false;\n//   }, delay + (amount - 1) * step + 100); //* Запасний час на виконання останнього проміса\n// });\n\n// $resetBtn.addEventListener('click', event => {\n//   event.preventDefault();\n//   //* Скидаємо значення полів вводу на стандартні\n//   $formInputs.delay.disabled = false;\n//   $formInputs.delay.value = 1500;\n//   $formInputs.step.value = 1000;\n//   $formInputs.amount.value = 5;\n// });\n\n//! ------------------------------   ВАРІАНТ 4   ----------------------------------\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $form = document.querySelector('.form');\n// const $formInputs = {\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n// };\n\n// const $submitButton = document.querySelector('button[type=\"submit\"]');\n// const $resetButton = document.querySelector('button[type=\"reset\"]');\n\n// $form.addEventListener('submit', event => {\n//   event.preventDefault();\n\n//   const delay = Number($formInputs.delay.value);\n//   const step = Number($formInputs.step.value);\n//   const amount = Number($formInputs.amount.value);\n\n//   if (step < 0 || delay < 0 || amount <= 0) {\n//     Notify.failure('Некоректні значення введених параметрів.');\n//     return;\n//   }\n\n//   $submitButton.disabled = true; // Деактивація кнопки \"Submit\"\n//   $resetButton.disabled = true; // Деактивація кнопки \"Reset\"\n\n//   let promisesToExecute = []; // Зберігаємо проміси для майбутнього виконання\n\n//   for (let i = 0; i < amount; i += 1) {\n//     const promiseDelay = delay + i * step;\n\n//     const promise = createPromise(i + 1, promiseDelay)\n//       .then(value => {\n//         Notify.success(value);\n//       })\n//       .catch(err => {\n//         Notify.failure(err);\n//       })\n//       .finally(() => {\n//         // Після завершення промісу видаляємо його з масиву промісів\n//         promisesToExecute = promisesToExecute.filter(p => p !== promise);\n\n//         // Після виконання всіх промісів активуємо кнопки \"Submit\" і \"Reset\" знову\n//         if (promisesToExecute.length === 0) {\n//           $submitButton.disabled = false;\n//           $resetButton.disabled = false;\n//         }\n//       });\n\n//     promisesToExecute.push(promise);\n//   }\n// });\n\n// $resetButton.addEventListener('click', event => {\n//   $form.reset(); // Скидуємо значення форми\n// });\n\n//! ------------------------------   ВАРІАНТ 5   ----------------------------------\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst $form = document.querySelector('.form');\nconst $formInputs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\nconst $submitBtn = document.getElementById('submitBtn');\nconst $resetBtn = document.getElementById('resetBtn');\n\n$form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = Number($formInputs.delay.value);\n  const step = Number($formInputs.step.value);\n  const amount = Number($formInputs.amount.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notify.failure('Некоректні значення введених параметрів!');\n    return;\n  }\n\n  // Disable the Submit button while promises are being generated\n  $submitBtn.disabled = true;\n  $resetBtn.disabled = true;\n\n  const promises = [];\n\n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * step;\n    promises.push(createPromise(i + 1, promiseDelay));\n  }\n\n  Promise.all(promises)\n    .then(values => {\n      for (const value of values) {\n        Notify.success(value);\n      }\n    })\n    .catch(err => {\n      Notify.failure(err);\n    })\n    .finally(() => {\n      // Enable the Submit button after all promises are resolved\n      $submitBtn.disabled = false;\n      $resetBtn.disabled = false;\n    });\n});\n\n// Reset button functionality\n$resetBtn.addEventListener('click', () => {\n  $formInputs.delay.value = '1000';\n  $formInputs.step.value = '500';\n  $formInputs.amount.value = '5';\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$$form","document","querySelector","$ce04d3a99e08e73b$var$$formInputs","delay","step","amount","$ce04d3a99e08e73b$var$$submitBtn","getElementById","$ce04d3a99e08e73b$var$$resetBtn","$ce04d3a99e08e73b$var$createPromise","position","Promise","res","rej","setTimeout","Math","random","concat","addEventListener","event","preventDefault","Number","value","Notify","failure","disabled","promises","i","promiseDelay","push","all","then","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","success","err","return","catch","finally"],"version":3,"file":"03-promises.8ffbd998.js.map"}