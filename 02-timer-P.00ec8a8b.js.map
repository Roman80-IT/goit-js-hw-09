{"mappings":"oeA8nBA,IAAAA,EAAAC,EAAA,S,aAIA,MAAMC,EAAYC,SAASC,cAAc,sBACnCC,EAAaF,SAASC,cAAc,oBACpCE,EAAc,CAClBC,KAAMJ,SAASC,cAAc,mBAC7BI,MAAOL,SAASC,cAAc,oBAC9BK,QAASN,SAASC,cAAc,sBAChCM,QAASP,SAASC,cAAc,uBAGlCF,EAAUS,UAAW,EACK,IAAtBC,EAAcC,KAAKC,MACnBC,EAAW,EACXC,EAAe,EACfC,EAAgB,KAEpB,MAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIR,KACjBS,gBAAiB,EACjBC,QAAQC,GAEFX,KAAKY,MAAMD,EAAc,IAAMZ,GACjCc,EAAAC,OAAOC,QAAQ,sCACf1B,EAAUS,UAAW,IAGrBK,EAAeH,KAAKY,MAAMD,EAAc,IACxCtB,EAAUS,UAAW,E,GAKrBkB,GAAK,EAAA7B,EAAA8B,SAAUzB,EAAYa,GA6CjC,SAASa,EAAeC,GACtB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CA5CnChC,EAAUiC,iBAAiB,SAE3B,WACMlB,GACFmB,cAAcnB,GAGhBA,EAAgBoB,aAAY,KAG1B,GAFAzB,EAAcC,KAAKC,MACnBC,EAAWC,EAAeJ,EACtBG,EAAW,EAAG,CAChB,MAAMuB,EAeZ,SAAmBC,GAEjB,MAAMC,EAAS,IACTC,EAAkB,GAATD,EACTE,EAAgB,GAATD,EACPE,EAAa,GAAPD,EAENnC,EAAOwB,EAAea,KAAKC,MAAMN,EAAKI,IACtCnC,EAAQuB,EAAea,KAAKC,MAAMN,EAAMI,EAAOD,IAC/CjC,EAAUsB,EAAea,KAAKC,MAAMN,EAAOI,EAAOD,EAAQD,IAC1D/B,EAAUqB,EACda,KAAKC,MAAMN,EAAQI,EAAOD,EAAQD,EAAUD,IAG9C,MAAO,C,KAAEjC,E,MAAMC,E,QAAOC,E,QAASC,E,CA7BHoC,CAAU/B,GAClCT,EAAYC,KAAKwC,YAAcT,EAAgB/B,KAC/CD,EAAYE,MAAMuC,YAAcT,EAAgB9B,MAChDF,EAAYG,QAAQsC,YAAcT,EAAgB7B,QAClDH,EAAYI,QAAQqC,YAAcT,EAAgB5B,O,MAElD0B,cAAcnB,EAAc,GAE7B,KAGHY,EAAGmB,UACH3C,EAAWM,UAAW,C","sources":["src/js/02-timer-P.js"],"sourcesContent":["//! Таймер зворотнього відліку\n\n//* Напиши скрипт таймера, який здійснює зворотний відлік до певної дати.\n//* Такий таймер може використовуватися у блогах та інтернет-магазинах, сторінках реєстрації подій, під час тех. обслуговування\n\n//! Бібліотека flatpickr\n//?     npm i flatpickr --save\n//* Використовуй цю бібліотеку, щоб дозволити користувачеві кросбраузерно вибрати кінцеву дату і час в одному елементі інтерфейсу.\n//* Для того щоб підключити CSS код бібліотеки в проект, необхідно додати ще один імпорт, крім того, що описаний в документації.\n\n//? Описаний в документації\n// import flatpickr from \"flatpickr\";\n//? Додатковий імпорт стилів\n// import \"flatpickr/dist/flatpickr.min.css\";\n\n//* Бібліотека очікує, що її ініціалізують на елементі input[type=\"text\"], тому ми додали до HTML документу поле input#datetime-picker\n//            <input type=\"text\" id=\"datetime-picker\" />\n\n//* Другим аргументом ф-ції flatpickr(selector, options) можна передати необов'язковий об'єкт параметрів.\n//* Ми підготували об'єкт, який потрібен для виконання завдання. Розберися, за що відповідає кожна властивість в документації «Options», і використовуй його у своєму коді.\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     console.log(selectedDates[0]);\n//   },\n// };\n\n//! Вибір дати\n//* Метод onClose() з об'єкта параметрів викликається щоразу під час закриття елемента інтерфейсу, який створює flatpickr.\n//* Саме у ньому варто обробляти дату, обрану користувачем. Параметр selectedDates - це масив обраних дат, тому ми беремо перший елемент.\n//*   - Якщо користувач вибрав дату в минулому, покажи window.alert() з текстом \"Please choose a date in the future\".\n//*   - Якщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає активною.\n//*   - Кнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату в майбутньому.\n//*   - Натисканням на кнопку «Start» починається відлік часу до обраної дати з моменту натискання.\n\n//! Відлік часу\n//* Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера,\n//* показуючи 4 цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n//*   - К-сть днів може складатися з більше, ніж 2-ох цифр.\n//*   - Таймер повинен зупинятися, коли дійшов до кінцевої дати, тобто 00:00:00:00\n\n//? НЕ БУДЕМО УСКЛАДНЮВАТИ\n//* Якщо таймер запущений, для того щоб вибрати нову дату і перезапустити його - необхідно перезавантажити сторінку.\n\n//* Для підрахунку значень використовуй готову ф-цію convertMs, де ms - різниця між кінцевою і поточною датою в мілісекундах.\n\n// function convertMs(ms) {\n//   //* Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   //* Remaining days\n//   const days = Math.floor(ms / day);\n//   //* Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   //* Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   //* Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n// console.log(convertMs(2000)); //* {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); //* {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); //* {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n//! Форматування часу\n//* Ф-ція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати.\n//* Зверни увагу, що вона не форматує результат. Тобто, якщо залишилося 4 хв або будь-якої іншої складової часу, то ф-ція поверне 4, а не 04.\n//* В інтерфейсі таймера необхідно додавати 0, якщо в числі менше 2-ох символів.\n//* Напиши ф-цію addLeadingZero(value), яка використовує метод padStart() і перед рендерингом інтефрейсу форматує значення.\n\n//! Бібліотека повідомлень\n//?    npm i notiflix\n// УВАГА\n//* Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n//* Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку notiflix.\n\n//! ---------------------------   ВАРІАНТ 1   -------------------------------\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// //* Вибираємо необхідні елементи зі сторінки\n// const $startButton = document.querySelector('button[data-start]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// //* Вимикаємо кнопку \"Start\" на початку (вона буде неактивна до вибору користувачем дати):\n// $startButton.disabled = true;\n\n// //* Ініціалізуємо деякі змінні:\n// let currentDate = Date.now(); //*  Поточний час у мілісекундах\n// let timeLeft = 0; //*          Залишок часу в мілісекундах\n// let selectedDate = 0; //*      Вибрана дата у мілісекундах\n\n// //* Створюємо налаштування для flatpickr:\n// const options = {\n//   enableTime: true, //* Включаємо вибір часу\n//   time_24hr: true, //* Використовувати 24-годинний формат часу\n//   defaultDate: new Date(), //* Встановлюємо поточну дату та час за замовчуванням\n//   minuteIncrement: 1, //* Задаємо приріст мінут при виборі часу\n//   onClose(selectedDates) {\n//     //* При закритті вибору дати та часу викликається ця функція\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       //* Якщо вибрана дата менша за поточну, виводимо повідомлення про помилку\n//       Notify.failure('Please choose a date in the future');\n//       $startButton.disabled = true; //* Вимикаємо кнопку \"Start\"\n//     } else {\n//       //* Інакше запам'ятовуємо вибрану дату та час\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false; //* Вмикаємо кнопку \"Start\"\n//     }\n//   },\n// };\n\n// //* Ініціалізуємо flatpickr з вказаними налаштуваннями:\n// const datePicker = flatpickr($inputDate, options);\n\n// //* Додаємо обробник події на кнопку \"Start\" (викликається при натисканні на неї):\n// $startButton.addEventListener('click', onStartButtonClick);\n\n// //* Ф-ція, яка стартує таймер:\n// function onStartButtonClick() {\n//   const interval = setInterval(() => {\n//     //* Отримуємо поточний час\n//     currentDate = Date.now();\n//     //* Обчислюємо залишок часу (різницю між вибраною датою та поточним часом)\n//     timeLeft = selectedDate - currentDate;\n//     if (timeLeft > 0) {\n//       //* Якщо залишок часу більше 0, оновлюємо значення таймера на сторінці\n//       const convertedTimeLeft = convertMs(timeLeft);\n//       $timerValues.days.textContent = convertedTimeLeft.days;\n//       $timerValues.hours.textContent = convertedTimeLeft.hours;\n//       $timerValues.minutes.textContent = convertedTimeLeft.minutes;\n//       $timerValues.seconds.textContent = convertedTimeLeft.seconds;\n//     } else {\n//       //* Інакше зупиняємо таймер\n//       clearInterval(interval);\n//     }\n//   }, 1000); //* Оновлюємо таймер кожну секунду\n// }\n\n// //* Ф-ція, яка перетворює час в мілісекундах у формат \"дні:години:хв:сек\":\n// function convertMs(ms) {\n//   //* К-сть мілісекунд у одиниці часу\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   //* К-сть залишених днів\n//   const days = addLeadingZero(Math.floor(ms / day));\n//   //* К-сть залишених годин\n//   const hours = addLeadingZero(Math.floor((ms % day) / hour));\n//   //* К-сть залишених хв\n//   const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n//   //* К-сть залишених сек\n//   const seconds = addLeadingZero(\n//     Math.floor((((ms % day) % hour) % minute) / second)\n//   );\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// //* Ф-ція, яка додає перед числом 'нуль' (якщо число < 10):\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n//! ---------------------------   ВАРІАНТ 2   -------------------------------\n//! інпут має бути дізейбл поки таймер працює, щоб користувач не міг неконтрольовано замінити значення дати,\n//!   можемо для зручності користувача винести додатково кнопку reset, яка обнулює всі дані таймера і зробить інпут знову доступним для обрання дати\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $startButton = document.querySelector('button[data-start]');\n// const $resetButton = document.querySelector('button[data-reset]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// //* Вимикаємо кнопки \"Start\" і \"Reset\" на початку (будуть неактивні до вибору дати):\n// $startButton.disabled = true;\n// $resetButton.disabled = true;\n\n// //* Ініціалізуємо деякі змінні:\n// let currentDate = Date.now(); //*  Поточний час у мс\n// let timeLeft = 0; //*          Залишок часу в мс\n// let selectedDate = 0; //*      Вибрана дата у мс\n// let interval; //* Змінна для збереження ідентифікатора таймера\n// let timerStarted = false; //* Змінна для відстеження початку/зупинки таймера\n\n// //* Створюємо налаштування для flatpickr:\n// const options = {\n//   enableTime: true, //* Включаємо вибір часу\n//   time_24hr: true, //* Використовувати 24-годинний формат часу\n//   defaultDate: new Date(), //* Встановлюємо поточну дату та час за замовчуванням\n//   minuteIncrement: 1, //* Задаємо приріст мінут при виборі часу\n//   onClose(selectedDates) {\n//     //* При закритті вибору дати та часу викликається ця ф-ція\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       //* Якщо вибрана дата менша за поточну, виводимо повідомлення про помилку\n//       alert('Please choose a date in the future');\n//       $startButton.disabled = true; //* Вимикаємо кнопку \"Start\"\n//     } else {\n//       //* Інакше запам'ятовуємо вибрану дату та час\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false; //* Вмикаємо кнопку \"Start\"\n//     }\n//   },\n// };\n\n// //* Ініціалізуємо flatpickr з вказаними налаштуваннями:\n// const datePicker = flatpickr($inputDate, options);\n\n// //* Обробники подій для кнопок \"Start\" та \"Reset\":\n// $startButton.addEventListener('click', onStartButtonClick);\n// $resetButton.addEventListener('click', onResetButtonClick);\n\n// //* Ф-ція, яка стартує таймер:\n// function onStartButtonClick() {\n//   if (!timerStarted) {\n//     interval = setInterval(updateTimer, 1000);\n//     timerStarted = true;\n//     $inputDate.disabled = true; //* Вимикаємо інпут після натискання на кнопку \"Start\"\n//     $resetButton.disabled = true; //* Вимикаємо кнопку \"Reset\" після натискання на кнопку \"Start\"\n//   }\n// }\n\n// //* Ф-ція зупиняє та скидає таймер:\n// function onResetButtonClick() {\n//   clearInterval(interval); //* Зупиняємо таймер, якщо він активний\n//   timerStarted = false;\n//   $inputDate.disabled = false; //* Зробити інпут доступним\n//   $startButton.disabled = true; //* Вимкнути кнопку \"Start\"\n//   $resetButton.disabled = true; //* Вимкнути кнопку \"Reset\"\n//   $timerValues.days.textContent = '00';\n//   $timerValues.hours.textContent = '00';\n//   $timerValues.minutes.textContent = '00';\n//   $timerValues.seconds.textContent = '00';\n// }\n\n// //* Ф-ція оновлює значення таймера на сторінці:\n// function updateTimer() {\n//   currentDate = Date.now();\n//   timeLeft = selectedDate - currentDate;\n//   if (timeLeft > 0) {\n//     const convertedTimeLeft = convertMs(timeLeft);\n//     $timerValues.days.textContent = convertedTimeLeft.days;\n//     $timerValues.hours.textContent = convertedTimeLeft.hours;\n//     $timerValues.minutes.textContent = convertedTimeLeft.minutes;\n//     $timerValues.seconds.textContent = convertedTimeLeft.seconds;\n//   } else {\n//     clearInterval(interval);\n//     timerStarted = false;\n//     $inputDate.disabled = false; // Зробити інпут доступним після закінчення таймера\n//     $startButton.disabled = true; // Вимкнути кнопку \"Start\"\n//     $resetButton.disabled = false; // Зробити кнопку \"Reset\" доступною\n//   }\n// }\n\n// //* Ф-ція, яка перетворює час в мс у формат \"дні:години:хв:сек\":\n// function convertMs(ms) {\n//   //* К-сть мс у одиниці часу\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   //* К-сть залишених днів\n//   const days = addLeadingZero(Math.floor(ms / day));\n//   //* К-сть залишених годин\n//   const hours = addLeadingZero(Math.floor((ms % day) / hour));\n//   //* К-сть залишених хв\n//   const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n//   //* К-сть залишених с\n//   const seconds = addLeadingZero(\n//     Math.floor((((ms % day) % hour) % minute) / second)\n//   );\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// //* Ф-ція, яка додає перед числом '0' (якщо число < 10):\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n//! ---------------------------   ВАРІАНТ 3   -------------------------------\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $startButton = document.querySelector('button[data-start]');\n// const $resetButton = document.querySelector('button[data-reset]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// let timerInterval;\n// let currentDate = Date.now();\n// let timeLeft = 0;\n// let selectedDate = 0;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       Notify.failure('Please choose a date in the future');\n//       $startButton.disabled = true;\n//     } else {\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false;\n//     }\n//   },\n// };\n\n// const datePicker = flatpickr($inputDate, options);\n\n// $startButton.addEventListener('click', onStartButtonClick);\n// $resetButton.addEventListener('click', onResetButtonClick);\n\n// function onStartButtonClick() {\n//   const interval = setInterval(() => {\n//     currentDate = Date.now();\n//     timeLeft = selectedDate - currentDate;\n//     if (timeLeft > 0) {\n//       const convertedTimeLeft = convertMs(timeLeft);\n//       updateTimerValues(convertedTimeLeft);\n//     } else {\n//       clearInterval(interval);\n//     }\n//   }, 1000);\n//   $inputDate.disabled = true;\n// }\n\n// function onResetButtonClick() {\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = false;\n//   $startButton.disabled = true;\n//   resetTimerValues();\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = addLeadingZero(Math.floor(ms / day));\n//   const hours = addLeadingZero(Math.floor((ms % day) / hour));\n//   const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n//   const seconds = addLeadingZero(\n//     Math.floor((((ms % day) % hour) % minute) / second)\n//   );\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function updateTimerValues({ days, hours, minutes, seconds }) {\n//   $timerValues.days.textContent = days;\n//   $timerValues.hours.textContent = hours;\n//   $timerValues.minutes.textContent = minutes;\n//   $timerValues.seconds.textContent = seconds;\n// }\n\n// function resetTimerValues() {\n//   updateTimerValues({ days: '00', hours: '00', minutes: '00', seconds: '00' });\n// }\n\n//! ---------------------------   ВАРІАНТ 4   -------------------------------\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $startButton = document.querySelector('button[data-start]');\n// const $resetButton = document.querySelector('button[data-reset]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n// console.log('Reset button clicked1'); // Перевірка кнопки\n// let timerInterval;\n// let currentDate = Date.now();\n// let timeLeft = 0;\n// let selectedDate = 0;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       Notify.failure('Please choose a date in the future');\n//       $startButton.disabled = true;\n//     } else {\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false;\n//     }\n//   },\n// };\n\n// const datePicker = flatpickr($inputDate, options);\n\n// // $startButton.addEventListener('click', onStartButtonClick);\n// // $resetButton.addEventListener('click', onResetButtonClick);\n\n// $startButton.addEventListener('click', () => {\n//   onStartButtonClick();\n// });\n\n// $resetButton.addEventListener('click', () => {\n//   onResetButtonClick();\n// });\n\n// // function onStartButtonClick()\n// // window.onStartButtonClick = function ()\n// function onStartButtonClick() {\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = true;\n//   $startButton.disabled = true;\n\n//   const interval = setInterval(() => {\n//     currentDate = Date.now();\n//     timeLeft = selectedDate - currentDate;\n\n//     if (timeLeft > 0) {\n//       const convertedTimeLeft = convertMs(timeLeft);\n//       $timerValues.days.textContent = addLeadingZero(convertedTimeLeft.days);\n//       $timerValues.hours.textContent = addLeadingZero(convertedTimeLeft.hours);\n//       $timerValues.minutes.textContent = addLeadingZero(\n//         convertedTimeLeft.minutes\n//       );\n//       $timerValues.seconds.textContent = addLeadingZero(\n//         convertedTimeLeft.seconds\n//       );\n//     } else {\n//       clearInterval(interval);\n//       resetTimerValues();\n//       Notify.success('Time is up!');\n//       $inputDate.disabled = false;\n//     }\n//   }, 1000);\n//   timerInterval = interval;\n// }\n\n// console.log('Reset button clicked2'); // Перевірка кнопки\n// // function onResetButtonClick()\n// // window.onResetButtonClick = function ()\n// function onResetButtonClick() {\n//   console.log('Reset button clicked'); // Перевірка кнопки\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = false;\n//   $startButton.disabled = true;\n//   resetTimerValues();\n// }\n\n// function resetTimerValues() {\n//   $timerValues.days.textContent = '00';\n//   $timerValues.hours.textContent = '00';\n//   $timerValues.minutes.textContent = '00';\n//   $timerValues.seconds.textContent = '00';\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n//! ---------------------------   ВАРІАНТ 5   -------------------------------\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $startButton = document.querySelector('button[data-start]');\n// const $resetButton = document.querySelector('button[data-reset]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// let timerInterval;\n// let currentDate = Date.now();\n// let timeLeft = 0;\n// let selectedDate = 0;\n// let isTimerRunning = false; //* Нова змінна для відстеження стану таймера\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       Notify.failure('Please choose a date in the future');\n//       $startButton.disabled = true;\n//     } else if (!isTimerRunning) {\n//       // Enable \"Start\" button only if timer is not running\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false;\n//     }\n//   },\n// };\n\n// const datePicker = flatpickr($inputDate, options);\n\n// $startButton.addEventListener('click', () => {\n//   onStartButtonClick();\n// });\n\n// $resetButton.addEventListener('click', () => {\n//   onResetButtonClick();\n// });\n\n// function onStartButtonClick() {\n//   clearInterval(timerInterval);\n//   isTimerRunning = true; // Start timer\n//   $inputDate.disabled = true;\n//   $startButton.disabled = true;\n\n//   const interval = setInterval(() => {\n//     if (!isTimerRunning) {\n//       clearInterval(interval);\n//       return;\n//     }\n\n//     currentDate = Date.now();\n//     timeLeft = selectedDate - currentDate;\n\n//     if (timeLeft > 0) {\n//       const convertedTimeLeft = convertMs(timeLeft);\n//       $timerValues.days.textContent = addLeadingZero(convertedTimeLeft.days);\n//       $timerValues.hours.textContent = addLeadingZero(convertedTimeLeft.hours);\n//       $timerValues.minutes.textContent = addLeadingZero(\n//         convertedTimeLeft.minutes\n//       );\n//       $timerValues.seconds.textContent = addLeadingZero(\n//         convertedTimeLeft.seconds\n//       );\n//     } else {\n//       clearInterval(interval);\n//       isTimerRunning = false; // Timer finished\n//       resetTimerValues();\n//       Notify.success('Time is up!');\n//       $inputDate.disabled = false;\n//     }\n//   }, 1000);\n//   timerInterval = interval;\n// }\n\n// function onResetButtonClick() {\n//   clearInterval(timerInterval);\n//   isTimerRunning = false; // Stop timer\n//   $inputDate.disabled = false;\n//   $startButton.disabled = true;\n//   resetTimerValues();\n// }\n\n// function resetTimerValues() {\n//   $timerValues.days.textContent = '00';\n//   $timerValues.hours.textContent = '00';\n//   $timerValues.minutes.textContent = '00';\n//   $timerValues.seconds.textContent = '00';\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n//! ---------------------------   Existing   -------------------------------\n\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst $startBtn = document.querySelector('button[data-start]');\nconst $inputDate = document.querySelector('#datetime-picker');\nconst $timerValue = {\n  days: document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes: document.querySelector('span[data-minutes]'),\n  seconds: document.querySelector('span[data-seconds]'),\n};\n\n$startBtn.disabled = true; //* Кнопка \"Start\" є неактивною на початку\nlet currentDate = Date.now();\nlet timeLeft = 0;\nlet selectedDate = 0;\nlet timerInterval = null; // Added to keep track of the timer interval\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    //* При обранні поточної дати або дати в минулому, відображає повідомлення та блокує кнопку \"Start\":\n    if (Date.parse(selectedDates[0]) < currentDate) {\n      Notify.failure('Please choose a date in the future');\n      $startBtn.disabled = true;\n      //* Кнопку \"Start\" активуємо тільки після вибору дати в майбутньому:\n    } else {\n      selectedDate = Date.parse(selectedDates[0]);\n      $startBtn.disabled = false;\n    }\n  },\n};\n\nconst fp = flatpickr($inputDate, options);\n\n$startBtn.addEventListener('click', onStartBtnClick);\n\nfunction onStartBtnClick() {\n  if (timerInterval) {\n    clearInterval(timerInterval); // Clear any existing interval to avoid overlapping timers\n  }\n\n  timerInterval = setInterval(() => {\n    currentDate = Date.now();\n    timeLeft = selectedDate - currentDate;\n    if (timeLeft > 0) {\n      const convertTimeLeft = convertMs(timeLeft);\n      $timerValue.days.textContent = convertTimeLeft.days;\n      $timerValue.hours.textContent = convertTimeLeft.hours;\n      $timerValue.minutes.textContent = convertTimeLeft.minutes;\n      $timerValue.seconds.textContent = convertTimeLeft.seconds;\n    } else {\n      clearInterval(timerInterval);\n    }\n  }, 1000);\n\n  //* Дату блокуємо, коли таймер вже запущено:\n  fp.destroy(); // Disable further date changes once the timer starts\n  $inputDate.disabled = true;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = addLeadingZero(Math.floor(ms / day));\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["$fbklV","parcelRequire","$2c3482881d110227$var$$startBtn","document","querySelector","$2c3482881d110227$var$$inputDate","$2c3482881d110227$var$$timerValue","days","hours","minutes","seconds","disabled","$2c3482881d110227$var$currentDate","Date","now","$2c3482881d110227$var$timeLeft","$2c3482881d110227$var$selectedDate","$2c3482881d110227$var$timerInterval","$2c3482881d110227$var$options","enableTime","time_24hr","defaultDate","minuteIncrement","onClose","selectedDates","parse","$iQIUW","Notify","failure","$2c3482881d110227$var$fp","default","$2c3482881d110227$var$addLeadingZero","value","String","padStart","addEventListener","clearInterval","setInterval","convertTimeLeft","ms","second","minute","hour","day","Math","floor","$2c3482881d110227$var$convertMs","textContent","destroy"],"version":3,"file":"02-timer-P.00ec8a8b.js.map"}