{"mappings":"oeAgDA,IAAAA,EAAAC,EAAA,SAGiC,MAA3BC,EAAQC,SAASC,cAAc,SAC/BC,EAAc,CAClBC,MAAOH,SAASC,cAAc,uBAC9BG,KAAMJ,SAASC,cAAc,sBAC7BI,OAAQL,SAASC,cAAc,yBAuDV,SAAdK,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAI,uBAAqBF,QAAiBJ,OAExCO,EAAE,sBAAoBH,QAAeJ,MAAU,GAElDA,EAAM,G;;;;AApCoCJ,EAA3Ce,iBAAiB,UAAUC,IAC/BA,EAAMC,iBAEN,MAAMb,EAAQc,OAAOf,EAAYC,MAAMe,OACjCd,EAAOa,OAAOf,EAAYE,KAAKc,OAC/Bb,EAASY,OAAOf,EAAYG,OAAOa,OAEzC,GAAId,EAAO,GAAKD,EAAQ,GAAKE,GAAU,EAErCR,EAAAsB,OAAOC,QAAQ,iDAIjB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAQgB,GAAK,EAAG,CAGlCf,EAAce,EAAI,EAFGlB,EAAQkB,EAAIjB,GAG9BkB,MAAKJ,IACJrB,EAAAsB,OAAOI,QAAQL,EAAM,IAEtBM,OAAMC,IACL5B,EAAAsB,OAAOC,QAAQK,EAAI,G","sources":["src/js/03-promises.js"],"sourcesContent":["//! Генератор промісів\n\n//* HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n//* Напиши скрипт, який на момент сабміту форми викликає ф-цію createPromise(position, delay) стільки разів,\n//*  скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку,\n//* враховуючи першу затримку(delay) і крок(step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     //* Fulfill\n//   } else {\n//     //* Reject\n//   }\n// }\n\n//* Доповни код ф-ції createPromise так, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n//*  Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//*  Використовуй початковий код ф-ції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//! Бібліотека повідомлень\n//?    npm i notiflix\n// УВАГА    Наступний функціонал не обов'язковий, але буде хорошою додатковою практикою.\n\n//* Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     //* Fulfill\n//   } else {\n//     //* Reject\n//   }\n// }\n\n//! ------------------------------   ВАРІАНТ 1   ----------------------------------\n//*  Створимо форму, яка дозволяє виконувати кілька промісів (асинхронних операцій) з різними затримками та к-стю повторень\n//*    і виводить сповіщення про їх результати за допомогою бібліотеки 'Notiflix Notify'\n\n//* Імпортуємо бібліотеку для сповіщень\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//* Вибираємо елементи - форму та поля вводу\nconst $form = document.querySelector('.form');\nconst $formInputs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\n//!---------------------------------- Виправити ------------------------------------\n//* Додаємо обробник події для подання форми\n// $form.addEventListener('submit', event => {\n//   event.preventDefault(); //* запобігаємо стандартній поведінці (перезавантаженню сторінки)\n\n//   //* Отримуємо значення з поля \"amount\" і створюємо проміси в залежності від к-сті\n//   for (let i = 0; i < $formInputs.amount.value; i += 1) {\n//     //* Рахуємо затримку проміса\n//     const promiseDelay =\n//       Number($formInputs.delay.value) + i * Number($formInputs.step.value);\n\n//     //* Створюємо проміс\n//     createPromise(i + 1, promiseDelay)\n//       .then(value => {\n//         Notify.success(value); //* Виводимо сповіщення про успішне виконання проміса\n//       })\n//       .catch(err => {\n//         Notify.failure(err); //* Виводимо сповіщення про невдале виконання проміса\n//       });\n//   }\n// });\n\n//!--------------------------------- Виправлення ---------------------------\n//! якщо step <0 або delay <0 або  amount <=0 показуємо нотифікашку і не рендеримо проміси\n\n$form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = Number($formInputs.delay.value);\n  const step = Number($formInputs.step.value);\n  const amount = Number($formInputs.amount.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    //* Показуємо нотифікацію (notification message) про некоректні значення\n    Notify.failure('Некоректні значення введених параметрів.');\n    return; //* Припиняємо виконання ф-ції, щоб не створювати проміси\n  }\n\n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * step;\n\n    createPromise(i + 1, promiseDelay)\n      .then(value => {\n        Notify.success(value);\n      })\n      .catch(err => {\n        Notify.failure(err);\n      });\n  }\n});\n\n//* Ф-ція для створення проміса\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$$form","document","querySelector","$47d4ff9957288465$var$$formInputs","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","res","rej","setTimeout","Math","random","addEventListener","event","preventDefault","Number","value","Notify","failure","i","then","success","catch","err"],"version":3,"file":"03-promises.73da1170.js.map"}