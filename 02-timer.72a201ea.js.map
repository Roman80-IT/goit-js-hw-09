{"mappings":"gfAiSA,IAcIA,EAdJC,EAAAC,EAAA,S,aAIMC,EAAeC,SAASC,cAAc,sBACtCC,EAAeF,SAASC,cAAc,sBACtCE,EAAaH,SAASC,cAAc,oBACpCG,EAAe,CACnBC,KAAML,SAASC,cAAc,mBAC7BK,MAAON,SAASC,cAAc,oBAC9BM,QAASP,SAASC,cAAc,sBAChCO,QAASR,SAASC,cAAc,uBAI9BQ,EAAcC,KAAKC,MACnBC,EAAW,EACXC,EAAe,EAGbC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIP,KACjBQ,gBAAiB,EACjBC,QAAA,SAAQC,GACFV,KAAKW,MAAMD,EAAc,IAAMX,GACjCa,EAAAC,OAAOC,QAAQ,sCACfzB,EAAa0B,UAAW,IAExBZ,EAAeH,KAAKW,MAAMD,EAAc,IACxCrB,EAAa0B,UAAW,E,IAKX,EAAA5B,EAAA6B,SAAUvB,EAAYW,GA+CzC,SAASa,IACPvB,EAAaC,KAAKuB,YAAc,KAChCxB,EAAaE,MAAMsB,YAAc,KACjCxB,EAAaG,QAAQqB,YAAc,KACnCxB,EAAaI,QAAQoB,YAAc,I,CAiBrC,SAASC,EAAeC,GACtB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAnEnCjC,EAAakC,iBAAiB,SAAS,YAQvC,WACEC,cAActC,GACdO,EAAWsB,UAAW,EACtB1B,EAAa0B,UAAW,EAExB,IAAMU,EAAWC,aAAY,WAI3B,GAHA3B,EAAcC,KAAKC,OACnBC,EAAWC,EAAeJ,GAEX,EAAG,CAChB,IAAM4B,GAkCOC,EAlCuB1B,EAsClC2B,EAAa,IADbC,EAAgB,IADhBC,EAAkB,IADlBC,EAAS,OAKTrC,EAAOsC,KAAKC,MAAMN,EAAKC,GACvBjC,EAAQqC,KAAKC,MAAMN,EAAMC,EAAOC,GAChCjC,EAAUoC,KAAKC,MAAMN,EAAOC,EAAOC,EAAQC,GAC3CjC,EAAUmC,KAAKC,MAAMN,EAAQC,EAAOC,EAAQC,EAAUC,GAErD,CAAErC,OAAMC,QAAOC,UAASC,YA5C3BJ,EAAaC,KAAKuB,YAAcC,EAAeQ,EAAkBhC,MACjED,EAAaE,MAAMsB,YAAcC,EAAeQ,EAAkB/B,OAClEF,EAAaG,QAAQqB,YAAcC,EACjCQ,EAAkB9B,SAEpBH,EAAaI,QAAQoB,YAAcC,EACjCQ,EAAkB7B,Q,MAGpB0B,cAAcC,GACdR,IACAL,EAAAC,OAAOsB,QAAQ,eACf1C,EAAWsB,UAAW,EACtB1B,EAAa0B,UAAW,EAoB9B,IAAmBa,EACXI,EACAD,EACAD,EACAD,EAEAlC,EACAC,EACAC,EACAC,C,GA3BH,KACHZ,EAAgBuC,C,CAlChBW,E,IAGF5C,EAAa+B,iBAAiB,SAAS,WAmCrCC,cAActC,GACdO,EAAWsB,UAAW,EACtB1B,EAAa0B,UAAW,EACxBE,G","sources":["src/js/02-timer.js"],"sourcesContent":["//! Таймер зворотнього відліку\n\n//* Напиши скрипт таймера, який здійснює зворотний відлік до певної дати.\n//* Такий таймер може використовуватися у блогах та інтернет-магазинах, сторінках реєстрації подій, під час тех. обслуговування\n\n//! Бібліотека flatpickr\n//?     npm i flatpickr --save\n//* Використовуй цю бібліотеку, щоб дозволити користувачеві кросбраузерно вибрати кінцеву дату і час в одному елементі інтерфейсу.\n//* Для того щоб підключити CSS код бібліотеки в проект, необхідно додати ще один імпорт, крім того, що описаний в документації.\n\n//? Описаний в документації\n// import flatpickr from \"flatpickr\";\n//? Додатковий імпорт стилів\n// import \"flatpickr/dist/flatpickr.min.css\";\n\n//* Бібліотека очікує, що її ініціалізують на елементі input[type=\"text\"], тому ми додали до HTML документу поле input#datetime-picker\n//            <input type=\"text\" id=\"datetime-picker\" />\n\n//* Другим аргументом ф-ції flatpickr(selector, options) можна передати необов'язковий об'єкт параметрів.\n//* Ми підготували об'єкт, який потрібен для виконання завдання. Розберися, за що відповідає кожна властивість в документації «Options», і використовуй його у своєму коді.\n\n//! Вибір дати\n//* Метод onClose() з об'єкта параметрів викликається щоразу під час закриття елемента інтерфейсу, який створює flatpickr.\n//* Саме у ньому варто обробляти дату, обрану користувачем. Параметр selectedDates - це масив обраних дат, тому ми беремо перший елемент.\n//*   - Якщо користувач вибрав дату в минулому, покажи window.alert() з текстом \"Please choose a date in the future\".\n//*   - Якщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає активною.\n//*   - Кнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату в майбутньому.\n//*   - Натисканням на кнопку «Start» починається відлік часу до обраної дати з моменту натискання.\n\n//! Відлік часу\n//* Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера,\n//* показуючи 4 цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n//*   - К-сть днів може складатися з більше, ніж 2-ох цифр.\n//*   - Таймер повинен зупинятися, коли дійшов до кінцевої дати, тобто 00:00:00:00\n\n//* Для підрахунку значень використовуй готову ф-цію convertMs, де ms - різниця між кінцевою і поточною датою в мілісекундах.\n\n// function convertMs(ms) {\n//   //* Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   //* Remaining days\n//   const days = Math.floor(ms / day);\n//   //* Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   //* Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   //* Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n// console.log(convertMs(2000)); //* {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); //* {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); //* {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n//! Форматування часу\n//* Ф-ція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати.\n//* Зверни увагу, що вона не форматує результат. Тобто, якщо залишилося 4 хв або будь-якої іншої складової часу, то ф-ція поверне 4, а не 04.\n//* В інтерфейсі таймера необхідно додавати 0, якщо в числі менше 2-ох символів.\n//* Напиши ф-цію addLeadingZero(value), яка використовує метод padStart() і перед рендерингом інтефрейсу форматує значення.\n\n//! Бібліотека повідомлень\n//?    npm i notiflix\n//* Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку notiflix.\n\n//! ---------------------------   ВАРІАНТ 4   -------------------------------\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $startButton = document.querySelector('button[data-start]');\n// const $resetButton = document.querySelector('button[data-reset]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// let timerInterval;\n// let currentDate = Date.now();\n// let timeLeft = 0;\n// let selectedDate = 0;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       Notify.failure('Please choose a date in the future');\n//       $startButton.disabled = true;\n//     } else {\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false;\n//     }\n//   },\n// };\n\n// const datePicker = flatpickr($inputDate, options);\n\n// $startButton.addEventListener('click', () => {\n//   onStartButtonClick();\n// });\n\n// $resetButton.addEventListener('click', () => {\n//   onResetButtonClick();\n// });\n\n// function onStartButtonClick() {\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = true;\n//   $startButton.disabled = true;\n\n//   const interval = setInterval(() => {\n//     currentDate = Date.now();\n//     timeLeft = selectedDate - currentDate;\n\n//     if (timeLeft > 0) {\n//       const convertedTimeLeft = convertMs(timeLeft);\n//       $timerValues.days.textContent = addLeadingZero(convertedTimeLeft.days);\n//       $timerValues.hours.textContent = addLeadingZero(convertedTimeLeft.hours);\n//       $timerValues.minutes.textContent = addLeadingZero(\n//         convertedTimeLeft.minutes\n//       );\n//       $timerValues.seconds.textContent = addLeadingZero(\n//         convertedTimeLeft.seconds\n//       );\n//     } else {\n//       clearInterval(interval);\n//       resetTimerValues();\n//       Notify.success('Time is up!');\n//       $inputDate.disabled = false;\n//     }\n//   }, 1000);\n//   timerInterval = interval;\n// }\n\n// function onResetButtonClick() {\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = false;\n//   $startButton.disabled = true;\n//   resetTimerValues();\n// }\n\n// function resetTimerValues() {\n//   $timerValues.days.textContent = '00';\n//   $timerValues.hours.textContent = '00';\n//   $timerValues.minutes.textContent = '00';\n//   $timerValues.seconds.textContent = '00';\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n//! ---------------------------   ВАРІАНТ 6   -------------------------------\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const $startButton = document.querySelector('button[data-start]');\n// const $resetButton = document.querySelector('button[data-reset]');\n// const $inputDate = document.querySelector('#datetime-picker');\n// const $timerValues = {\n//   days: document.querySelector('span[data-days]'),\n//   hours: document.querySelector('span[data-hours]'),\n//   minutes: document.querySelector('span[data-minutes]'),\n//   seconds: document.querySelector('span[data-seconds]'),\n// };\n\n// let timerInterval;\n// let currentDate = Date.now();\n// let timeLeft = 0;\n// let selectedDate = 0;\n\n// // Змінні опцій для датапікера таймера\n// const timerOptions = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (Date.parse(selectedDates[0]) < currentDate) {\n//       Notify.failure('Please choose a date in the future');\n//       $startButton.disabled = true;\n//     } else {\n//       selectedDate = Date.parse(selectedDates[0]);\n//       $startButton.disabled = false;\n//     }\n//   },\n// };\n\n// // Створення нового екземпляра датапікера для таймера\n// const timerDatePicker = flatpickr($inputDate, timerOptions);\n\n// $startButton.addEventListener('click', () => {\n//   onStartButtonClick();\n// });\n\n// $resetButton.addEventListener('click', () => {\n//   onResetButtonClick();\n// });\n\n// function onStartButtonClick() {\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = true; // Блокуємо вибір дати\n//   $startButton.disabled = true;\n\n//   const interval = setInterval(() => {\n//     currentDate = Date.now();\n//     timeLeft = selectedDate - currentDate;\n\n//     if (timeLeft > 0) {\n//       const convertedTimeLeft = convertMs(timeLeft);\n//       $timerValues.days.textContent = addLeadingZero(convertedTimeLeft.days);\n//       $timerValues.hours.textContent = addLeadingZero(convertedTimeLeft.hours);\n//       $timerValues.minutes.textContent = addLeadingZero(\n//         convertedTimeLeft.minutes\n//       );\n//       $timerValues.seconds.textContent = addLeadingZero(\n//         convertedTimeLeft.seconds\n//       );\n//     } else {\n//       clearInterval(interval);\n//       resetTimerValues();\n//       Notify.success('Time is up!');\n//       $inputDate.disabled = false;\n//     }\n//   }, 1000);\n//   timerInterval = interval;\n// }\n\n// function onResetButtonClick() {\n//   clearInterval(timerInterval);\n//   $inputDate.disabled = false;\n//   $startButton.disabled = true;\n//   resetTimerValues();\n// }\n\n// function resetTimerValues() {\n//   $timerValues.days.textContent = '00';\n//   $timerValues.hours.textContent = '00';\n//   $timerValues.minutes.textContent = '00';\n//   $timerValues.seconds.textContent = '00';\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n//! ---------------------------   ВАРІАНТ 7   -------------------------------\n\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst $startButton = document.querySelector('button[data-start]');\nconst $resetButton = document.querySelector('button[data-reset]');\nconst $inputDate = document.querySelector('#datetime-picker');\nconst $timerValues = {\n  days: document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes: document.querySelector('span[data-minutes]'),\n  seconds: document.querySelector('span[data-seconds]'),\n};\n\nlet timerInterval;\nlet currentDate = Date.now();\nlet timeLeft = 0;\nlet selectedDate = 0;\n\n// Options for flatpickr initialization\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (Date.parse(selectedDates[0]) < currentDate) {\n      Notify.failure('Please choose a date in the future');\n      $startButton.disabled = true;\n    } else {\n      selectedDate = Date.parse(selectedDates[0]);\n      $startButton.disabled = false;\n    }\n  },\n};\n\nconst datePicker = flatpickr($inputDate, options);\n\n$startButton.addEventListener('click', () => {\n  onStartButtonClick();\n});\n\n$resetButton.addEventListener('click', () => {\n  onResetButtonClick();\n});\n\nfunction onStartButtonClick() {\n  clearInterval(timerInterval);\n  $inputDate.disabled = true;\n  $startButton.disabled = true;\n\n  const interval = setInterval(() => {\n    currentDate = Date.now();\n    timeLeft = selectedDate - currentDate;\n\n    if (timeLeft > 0) {\n      const convertedTimeLeft = convertMs(timeLeft);\n      $timerValues.days.textContent = addLeadingZero(convertedTimeLeft.days);\n      $timerValues.hours.textContent = addLeadingZero(convertedTimeLeft.hours);\n      $timerValues.minutes.textContent = addLeadingZero(\n        convertedTimeLeft.minutes\n      );\n      $timerValues.seconds.textContent = addLeadingZero(\n        convertedTimeLeft.seconds\n      );\n    } else {\n      clearInterval(interval);\n      resetTimerValues();\n      Notify.success('Time is up!');\n      $inputDate.disabled = false;\n      $startButton.disabled = true; // Disable Start button after completion\n    }\n  }, 1000);\n  timerInterval = interval;\n}\n\nfunction onResetButtonClick() {\n  clearInterval(timerInterval);\n  $inputDate.disabled = false;\n  $startButton.disabled = true;\n  resetTimerValues();\n}\n\nfunction resetTimerValues() {\n  $timerValues.days.textContent = '00';\n  $timerValues.hours.textContent = '00';\n  $timerValues.minutes.textContent = '00';\n  $timerValues.seconds.textContent = '00';\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["$84b9dae4df53835d$var$timerInterval","$dbdyf","parcelRequire","$84b9dae4df53835d$var$$startButton","document","querySelector","$84b9dae4df53835d$var$$resetButton","$84b9dae4df53835d$var$$inputDate","$84b9dae4df53835d$var$$timerValues","days","hours","minutes","seconds","$84b9dae4df53835d$var$currentDate","Date","now","$84b9dae4df53835d$var$timeLeft","$84b9dae4df53835d$var$selectedDate","$84b9dae4df53835d$var$options","enableTime","time_24hr","defaultDate","minuteIncrement","onClose","selectedDates","parse","$h6c0i","Notify","failure","disabled","default","$84b9dae4df53835d$var$resetTimerValues","textContent","$84b9dae4df53835d$var$addLeadingZero","value","String","padStart","addEventListener","clearInterval","interval","setInterval","convertedTimeLeft","ms","day","hour","minute","second","Math","floor","success","$84b9dae4df53835d$var$onStartButtonClick"],"version":3,"file":"02-timer.72a201ea.js.map"}