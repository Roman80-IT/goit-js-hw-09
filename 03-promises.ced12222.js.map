{"mappings":"gfAgIA,IAAAA,EAAAC,EAAA,SAGMC,EAAQC,SAASC,cAAc,SAC/BC,EAAc,CAClBC,MAAOH,SAASC,cAAc,uBAC9BG,KAAMJ,SAASC,cAAc,sBAC7BI,OAAQL,SAASC,cAAc,yBAE3BK,EAAYN,SAASO,eAAe,YAwDnB,SAAdC,EAAcC,EAAUN,GAC/B,OAAO,IAAIO,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAI,uBAAwCK,OAAfP,EAAS,QAAYO,OAANb,EAAM,OAEhDS,EAAE,sBAAqCI,OAAfP,EAAS,QAAYO,OAANb,EAAM,M,GAEhDA,E,IA9D8CD,EAAzCC,MAAMc,UAAW,EAGDlB,EAAtBmB,iBAAiB,UAAU,SAAAC,GAC/BA,EAAMC,iBAEN,IAAMjB,EAAQkB,OAAOnB,EAAYC,MAAMmB,OACjClB,EAAOiB,OAAOnB,EAAYE,KAAKkB,OAC/BjB,EAASgB,OAAOnB,EAAYG,OAAOiB,OAEzC,GAAIlB,EAAO,GAAKD,EAAQ,GAAKE,GAAU,EACrCR,EAAA0B,OAAOC,QACL,yFAFJ,CAQuCtB,EAA3BC,MAAMc,UAAW,EAGK,IAA7B,IAAIQ,EAAI,EAAGA,EAAIpB,EAAQoB,GAAK,EAAG,CAKnBjB,EAADiB,EAAI,EAHGtB,EAAQsB,EAAIrB,GAI9BsB,MAAK,SAAAJ,GACJzB,EAAA0B,OAAOI,QAAQL,E,IAEhBM,OAAM,SAAAC,GACLhC,EAAA0B,OAAOC,QAAQK,E,IAK4ChB,YAAtD,WACTX,EAAYC,MAAMc,UAAW,EAC7Bf,EAAYC,MAAMmB,MAAQ,E,GACzBnB,GAASE,EAAS,GAAKD,EAAO,I,KAGnCE,EAAUY,iBAAiB,SAAS,SAAAC,GAClCA,EAAMC,iBAGgClB,EAA1BC,MAAMc,UAAW,EAC7Bf,EAAYC,MAAMmB,MAAQ,IAC1BpB,EAAYE,KAAKkB,MAAQ,IACzBpB,EAAYG,OAAOiB,MAAQ,C","sources":["src/js/03-promises.js"],"sourcesContent":["//! Генератор промісів\n\n//* HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n//* Напиши скрипт, який на момент сабміту форми викликає ф-цію createPromise(position, delay) стільки разів,\n//*  скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку,\n//* враховуючи першу затримку(delay) і крок(step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     //* Fulfill\n//   } else {\n//     //* Reject\n//   }\n// }\n\n//* Доповни код ф-ції createPromise так, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n//*  Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//*  Використовуй початковий код ф-ції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//! Бібліотека повідомлень\n//?    npm i notiflix\n// УВАГА    Наступний функціонал не обов'язковий, але буде хорошою додатковою практикою.\n\n//* Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     //* Fulfill\n//   } else {\n//     //* Reject\n//   }\n// }\n\n//! ------------------------------   ВАРІАНТ 1   ----------------------------------\n//*  Створимо форму, яка дозволяє виконувати кілька промісів (асинхронних операцій) з різними затримками та к-стю повторень\n//*    і виводить сповіщення про їх результати за допомогою бібліотеки 'Notiflix Notify'\n\n//* Імпортуємо бібліотеку для сповіщень\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// //* Вибираємо елементи - форму та поля вводу\n// const $form = document.querySelector('.form');\n// const $formInputs = {\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n// };\n\n//!---------------------------------- Виправити ------------------------------------\n//* Додаємо обробник події для подання форми\n// $form.addEventListener('submit', event => {\n//   event.preventDefault(); //* запобігаємо стандартній поведінці (перезавантаженню сторінки)\n\n//   //* Отримуємо значення з поля \"amount\" і створюємо проміси в залежності від к-сті\n//   for (let i = 0; i < $formInputs.amount.value; i += 1) {\n//     //* Рахуємо затримку проміса\n//     const promiseDelay =\n//       Number($formInputs.delay.value) + i * Number($formInputs.step.value);\n\n//     //* Створюємо проміс\n//     createPromise(i + 1, promiseDelay)\n//       .then(value => {\n//         Notify.success(value); //* Виводимо сповіщення про успішне виконання проміса\n//       })\n//       .catch(err => {\n//         Notify.failure(err); //* Виводимо сповіщення про невдале виконання проміса\n//       });\n//   }\n// });\n\n//!--------------------------------- Виправлення ---------------------------\n//! якщо step <0 або delay <0 або  amount <=0 показуємо нотифікашку і не рендеримо проміси\n\n// $form.addEventListener('submit', event => {\n//   event.preventDefault();\n\n//   const delay = Number($formInputs.delay.value);\n//   const step = Number($formInputs.step.value);\n//   const amount = Number($formInputs.amount.value);\n\n//   if (step < 0 || delay < 0 || amount <= 0) {\n//     //* Скористаймося бібліотекою Notiflix Notify, яка дозволяє виводити різні типи сповіщень (нотифікацій)(notification message) на сторінці.\n//     //*  використовується ф-ція Notify.success() для виведення сповіщення зі статусом успішного виконання промісу та\n//     //*  Notify.failure() для виведення сповіщення зі статусом невдалого виконання промісу\n//     Notify.failure('Некоректні значення введених параметрів.');\n//     return; //* Припиняємо виконання ф-ції, щоб не створювати проміси\n//   }\n\n//   for (let i = 0; i < amount; i += 1) {\n//     const promiseDelay = delay + i * step;\n\n//     createPromise(i + 1, promiseDelay)\n//       .then(value => {\n//         Notify.success(value);\n//       })\n//       .catch(err => {\n//         Notify.failure(err);\n//       });\n//   }\n// });\n\n// //* Ф-ція для створення проміса\n// function createPromise(position, delay) {\n//   return new Promise((res, rej) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         rej(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n// }\n\n//! ------------------------------   ВАРІАНТ 2   ----------------------------------\n\n//* Імпортуємо бібліотеку для сповіщень\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//* Вибираємо елементи - форму та поля вводу\nconst $form = document.querySelector('.form');\nconst $formInputs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\nconst $resetBtn = document.getElementById('resetBtn');\n\n//* Забороняємо користувачу вводити значення поки таймер працює\n$formInputs.delay.disabled = true;\n\n//* Обробник події для подання форми:\n$form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = Number($formInputs.delay.value);\n  const step = Number($formInputs.step.value);\n  const amount = Number($formInputs.amount.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notify.failure(\n      'Incorrect values ​​of entered parameters. Некоректні значення введених параметрів'\n    );\n    return;\n  }\n\n  //* Деактивуємо поле вводу під час роботи таймера\n  $formInputs.delay.disabled = true;\n\n  //* створюємо проміси в залежності від к-сті\n  for (let i = 0; i < amount; i += 1) {\n    //* Рахуємо затримку проміса\n    const promiseDelay = delay + i * step;\n\n    //* Створюємо проміс\n    createPromise(i + 1, promiseDelay)\n      .then(value => {\n        Notify.success(value);\n      })\n      .catch(err => {\n        Notify.failure(err);\n      });\n  }\n\n  //* Після завершення таймера, активуємо поле вводу та видаляємо значення в ньому\n  setTimeout(() => {\n    $formInputs.delay.disabled = false;\n    $formInputs.delay.value = '';\n  }, delay + (amount - 1) * step + 100); //* Запасний час на виконання останнього проміса\n});\n\n$resetBtn.addEventListener('click', event => {\n  event.preventDefault();\n\n  //* Скидаємо значення полів вводу на стандартні\n  $formInputs.delay.disabled = false;\n  $formInputs.delay.value = 1000;\n  $formInputs.step.value = 100;\n  $formInputs.amount.value = 5;\n});\n\n//* Ф-ція для створення проміса\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$$form","document","querySelector","$ce04d3a99e08e73b$var$$formInputs","delay","step","amount","$ce04d3a99e08e73b$var$$resetBtn","getElementById","$ce04d3a99e08e73b$var$createPromise","position","Promise","res","rej","setTimeout","Math","random","concat","disabled","addEventListener","event","preventDefault","Number","value","Notify","failure","i","then","success","catch","err"],"version":3,"file":"03-promises.ced12222.js.map"}